import tkinter as tk
from tkinter import Menu, Text, Frame, Button, messagebox, filedialog


class App(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title("GUI 範例")
        self.geometry("600x400")

        self.current_file = None  # 記錄目前檔案路徑

        self._create_menu()
        self._create_toolbar()
        self._create_main_ui()

    def _create_menu(self):
        menubar = Menu(self)

        # 檔案功能表
        file_menu = Menu(menubar, tearoff=0)
        file_menu.add_command(label="開啟", command=self.open_file)
        file_menu.add_command(label="儲存", command=self.save_file)
        file_menu.add_command(label="另存新檔", command=self.save_file_as)
        file_menu.add_separator()
        file_menu.add_command(label="離開", command=self.quit)
        menubar.add_cascade(label="檔案", menu=file_menu)

        # 編輯功能表
        edit_menu = Menu(menubar, tearoff=0)
        edit_menu.add_command(label="剪下", command=lambda: self.output_text.event_generate("<<Cut>>"))
        edit_menu.add_command(label="貼上", command=lambda: self.output_text.event_generate("<<Paste>>"))
        menubar.add_cascade(label="編輯", menu=edit_menu)

        self.config(menu=menubar)

    def _create_toolbar(self):
        toolbar = Frame(self, bd=1, relief=tk.RAISED)

        toggle_output_btn = Button(toolbar, text="顯示/隱藏輸出", command=self.toggle_output)
        toggle_output_btn.pack(side=tk.LEFT, padx=2, pady=2)

        toolbar.pack(side=tk.TOP, fill=tk.X)

    def _create_main_ui(self):
        self.main_frame = Frame(self)
        self.main_frame.pack(expand=True, fill=tk.BOTH)

        # 底部按鈕
        self.action_btn = Button(self.main_frame, text="執行", command=self.perform_action)
        self.action_btn.pack(side=tk.BOTTOM, pady=5)

        # 可隱藏的輸出區域
        self.output_visible = True
        self.output_text = Text(self.main_frame, height=10)
        self.output_text.pack(side=tk.BOTTOM, fill=tk.X, padx=5, pady=5)

    def toggle_output(self):
        if self.output_visible:
            self.output_text.pack_forget()
        else:
            self.output_text.pack(side=tk.BOTTOM, fill=tk.X, padx=5, pady=5)
        self.output_visible = not self.output_visible

    def perform_action(self):
        self.output_text.insert(tk.END, "你按下了執行按鈕\n")

    def open_file(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()
                self.output_text.delete(1.0, tk.END)
                self.output_text.insert(tk.END, content)
                self.current_file = file_path
                self.title(f"GUI 範例 - {file_path}")
            except Exception as e:
                messagebox.showerror("錯誤", f"無法開啟檔案：\n{e}")

    def save_file(self):
        if self.current_file:
            try:
                content = self.output_text.get(1.0, tk.END)
                with open(self.current_file, "w", encoding="utf-8") as f:
                    f.write(content)
                messagebox.showinfo("儲存成功", f"檔案已儲存：\n{self.current_file}")
            except Exception as e:
                messagebox.showerror("錯誤", f"無法儲存檔案：\n{e}")
        else:
            self.save_file_as()

    def save_file_as(self):
        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            try:
                content = self.output_text.get(1.0, tk.END)
                with open(file_path, "w", encoding="utf-8")_
